package bot

import (
	"context"
	"fmt"
	"log/slog"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"github.com/shakirovformal/unu_project_api_realizer/api"
)

type UserState struct {
	State     string
	Data      map[string]interface{}
	CreatedAt time.Time
	Command   string
}

const (
	STATE_WAIT_FOLDER_NAME = "wait_folder_name"
	STATE_WAIT_INPUT_ROWS  = "wait_input_rows"
	STATE_WAIT_FOLDER_ID   = "wait_folder_id"
	STATE_IDLE             = "idle"
)

type dbRedis interface {
	AddRow()
	GetRow()
	DelRow()
	CheckUnfullfilledRows()
}

var userStates = make(map[int64]*UserState)
var stateMutex sync.RWMutex

func setState(chatID int64, state *UserState) {
	stateMutex.Lock()
	defer stateMutex.Unlock()
	state.CreatedAt = time.Now()
	userStates[chatID] = state
}

func getState(chatID int64) (*UserState, bool) {
	stateMutex.RLock()
	defer stateMutex.RUnlock()
	state, exists := userStates[chatID]
	return state, exists
}

func clearState(chatID int64) {
	stateMutex.Lock()
	defer stateMutex.Unlock()
	delete(userStates, chatID)
}

func welcomeMessage(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%s' for will start work", update.Message.Chat.Username, update.Message.Text))
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏ /help",
	})
}
func helpMessage(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%s' for get help information", update.Message.Chat.Username, update.Message.Text))
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: `–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/balance - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å
/get_folders_id - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏(–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞)
/create_folder - —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
/delete_folder - —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
/create_folder - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
/create_task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
/delete_task - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–¥–∞—á–∏
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üôÇ
–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: @tatarkazawarka`,
	})
}

func checkBalance(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%s' for check balance wallet", update.Message.Chat.Username, update.Message.Text))
	testObject := api.NewClient(os.Getenv("URL_UNU"), os.Getenv("UNU_API_TOKEN"))

	var firstObj api.UNUAPI = testObject
	balance := firstObj.Get_balance()
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   fmt.Sprintf("–ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: %s", balance),
	})
}
func getFoldersId(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%v' for get folder list id", update.Message.Chat.Username, update.Message.Text))
	testObject := api.NewClient(os.Getenv("URL_UNU"), os.Getenv("UNU_API_TOKEN"))

	var firstObj api.UNUAPI = testObject
	folder_list := firstObj.Get_folders()
	result_text := "–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫:"
	for _, value := range folder_list {
		result_text += fmt.Sprintf("\nID: %s. –ù–∞–∑–≤–∞–Ω–∏–µ: %s", value.ID.String(), value.Name)
	}
	result_text += "\nP.S –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–∞—Å –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ üòâ"
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   fmt.Sprintf("–í–∞—à–∏ –ø–∞–ø–∫–∏: %s", result_text),
	})

}

func handler(ctx context.Context, b *bot.Bot, update *models.Update) {

	chatID := update.Message.Chat.ID
	state, exists := getState(chatID)

	if !exists {
		// –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
	if time.Since(state.CreatedAt) > 5*time.Minute {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
		})
		clearState(chatID)
		return
	}

	switch state.State {
	case STATE_WAIT_FOLDER_NAME:
		handleFolderNameInput(ctx, b, update, state)
	case STATE_WAIT_FOLDER_ID:
		handleFolderIdInput(ctx, b, update, state)
	case STATE_WAIT_INPUT_ROWS:
		handleTaskRowInput(ctx, b, update, state)
	default:
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.",
		})
		clearState(chatID)
	}

}
func handleFolderNameInput(ctx context.Context, b *bot.Bot, update *models.Update, state *UserState) {
	chatID := update.Message.Chat.ID
	folderName := strings.TrimSpace(update.Message.Text)

	if len(folderName) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–ò–º—è –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
		})
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   fmt.Sprintf("–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É '%s'...", folderName),
	})

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
	client := api.NewClient(os.Getenv("URL_UNU"), os.Getenv("UNU_API_TOKEN"))
	var clienObj api.UNUAPI = client
	folder_id, err := clienObj.Create_folder(folderName)

	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", "ERROR:", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: %v", err),
		})
	} else {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   fmt.Sprintf("‚úÖ –ü–∞–ø–∫–∞ '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\nID: %d", folderName, folder_id),
		})
	}

	clearState(chatID)
}
func createFolder(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%s' for create folder", update.Message.Chat.Username, update.Message.Text))
	chatID := update.Message.Chat.ID

	setState(chatID, &UserState{
		State:   STATE_WAIT_FOLDER_NAME,
		Data:    make(map[string]interface{}),
		Command: "create_folder",
	})
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å:",
	})

}
func deleteFolder(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%s' for delete folder", update.Message.Chat.Username, update.Message.Text))
	chatID := update.Message.Chat.ID

	setState(chatID, &UserState{
		State:   STATE_WAIT_FOLDER_ID,
		Data:    make(map[string]interface{}),
		Command: "delete_folder",
	})
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –ø–∞–ø–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å:",
	})

}
func handleFolderIdInput(ctx context.Context, b *bot.Bot, update *models.Update, state *UserState) {
	chatID := update.Message.Chat.ID
	folderId := strings.TrimSpace(update.Message.Text)

	if len(folderId) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "ID –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ ID –µ—â–µ —Ä–∞–∑:",
		})
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   fmt.Sprintf("–£–¥–∞–ª—è—é –ø–∞–ø–∫—É '%s'...", folderId),
	})

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
	client := api.NewClient(os.Getenv("URL_UNU"), os.Getenv("UNU_API_TOKEN"))
	var clienObj api.UNUAPI = client
	folderIdInt, err := strconv.Atoi(folderId)
	if err != nil {
		slog.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å folderId –≤ —Ç–∏–ø integer", "ERROR:", err)
	}
	_, err = clienObj.Delete_folder(folderIdInt)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏:", "ERROR:", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: %v", err),
		})
	} else {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n",
		})
	}

	clearState(chatID)
}

func createTask(ctx context.Context, b *bot.Bot, update *models.Update) {
	slog.Info(fmt.Sprintf("User '%s' wrote '%s' for create folder", update.Message.Chat.Username, update.Message.Text))
	chatID := update.Message.Chat.ID

	// TODO: –°–¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –æ—á–µ—Ä–µ–¥—å.
	// –ï—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏? –ï—Å–ª–∏ –µ—Å—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ—Ç–æ–º?

	// –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ –∑–∞–¥–∞—á –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	setState(chatID, &UserState{
		State:   STATE_WAIT_INPUT_ROWS,
		Data:    make(map[string]interface{}),
		Command: "create_task",
	})
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã: –ü—Ä–∏–º–µ—Ä: 2-15(–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 1, —Å–µ—Ä–≤–∏—Å–Ω–∞—è, –Ω–∞ –Ω–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫)",
	})

}
func handleTaskRowInput(ctx context.Context, b *bot.Bot, update *models.Update, state *UserState) {
	chatID := update.Message.Chat.ID
	folderName := strings.TrimSpace(update.Message.Text)

	if len(folderName) == 0 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–°—Ç—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º...",
		})
		return
	}
	rows := strings.Split(update.Message.Text, ":")
	beginRowString, endRowString := rows[0], rows[1]

	beginRowInt, err := strconv.Atoi(beginRowString)
	if err != nil {
		slog.Error(fmt.Sprintf("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏... –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤—ë–ª: %s —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ", update.Message.Chat.Username, update.Message.Text))
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —è –≤–∞–º –ø–æ–∫–∞–∑–∞–ª",
		})
		clearState(chatID)
		return

	}
	endRowInt, err := strconv.Atoi(endRowString)
	if err != nil {
		slog.Error(fmt.Sprintf("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏... –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–≤—ë–ª: %s —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ", update.Message.Chat.Username, update.Message.Text))
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —è –≤–∞–º –ø–æ–∫–∞–∑–∞–ª",
		})
		clearState(chatID)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: chatID,
		Text:   "–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á–∏...",
	})

	// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
	client := api.NewClient(os.Getenv("URL_UNU"), os.Getenv("UNU_API_TOKEN"))
	var clienObj api.UNUAPI = client

	folder_id, err := clienObj.Add_task(beginRowInt, endRowInt)

	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", "ERROR:", err)
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: %v", err),
		})
	} else {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: chatID,
			Text:   fmt.Sprintf("‚úÖ  '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\nID: %d", folderName, folder_id),
		})
	}

	clearState(chatID)
}
