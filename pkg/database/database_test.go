package database

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"testing"

	"github.com/shakirovformal/unu_project_api_realizer/pkg/models"
	"github.com/stretchr/testify/require"
)

func TestAddRow(t *testing.T) {

	testNormalData := []*models.RowObject{
		// –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		models.NewRowObject(1, "—É–±—Ä–∏—Ä –µ–∫–±", "yandex.ru", 1, "–°–¥–µ–ª–∞—Ç—å –æ—Ç–∑—ã–≤", "25.10.2020"),
		// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ HTML
		models.NewRowObject(3, "–¢–µ—Å—Ç", "https://site.com", 1, "–¢–µ–∫—Å—Ç —Å <html> —Ç–µ–≥–∞–º–∏", "15.07.2024"),
		// –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
		models.NewRowObject(4, "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã",
			"https://very-long-domain-name-that-might-break-something.com",
			2,
			"–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–æ–ª–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			"29.02.2024"),
		// –î–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
		models.NewRowObject(16, "Project Name", "site.com", 1, "English description", "01.01.2024"),
		models.NewRowObject(17, "È°πÁõÆÂêçÁß∞", "site.com", 2, "‰∏≠ÊñáÊèèËø∞", "01.01.2024"),
		models.NewRowObject(18, "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç", "site.com", 1, "Êó•Êú¨Ë™û„ÅÆË™¨Êòé", "01.01.2024"),

		// NULL-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã (–µ—Å–ª–∏ –≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
		models.NewRowObject(19, "NULL", "NULL", 1, "NULL", "NULL"),
		// –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ URL
		models.NewRowObject(5, "–ü—Ä–æ–µ–∫—Ç", "not-a-valid-url", 1, "–û–ø–∏—Å–∞–Ω–∏–µ", "30.02.2023"), // –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
		models.NewRowObject(10, "–ü—Ä–æ–µ–∫—Ç", "site.com", 1, "–û–ø–∏—Å–∞–Ω–∏–µ", "invalid-date"),
		models.NewRowObject(11, "–ü—Ä–æ–µ–∫—Ç", "site.com", 2, "–û–ø–∏—Å–∞–Ω–∏–µ", "2024-13-45"), // –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –¥–∞—Ç–∞
		// –Æ–Ω–∏–∫–æ–¥ –∏ —ç–º–æ–¥–∑–∏
		models.NewRowObject(12, "–ü—Ä–æ–µ–∫—Ç üöÄ", "site.com", 1, "–û–ø–∏—Å–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ üëç –∏ Unicode ÊµãËØï", "01.01.2024"),
		// –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π ID
		models.NewRowObject(999999, "–ü—Ä–æ–µ–∫—Ç", "site.com", 1, "–û–ø–∏—Å–∞–Ω–∏–µ", "01.01.2024"),
	}

	testDataWithError := []*models.RowObject{

		// –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
		models.NewRowObject(2, "", "https://example.com", 2, "", "01.01.2024"),

		// –ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		models.NewRowObject(0, "–ü—Ä–æ–µ–∫—Ç", "google.com", 0, "–û–ø–∏—Å–∞–Ω–∏–µ", "31.12.2023"),

		// –ö—Ä–∞–π–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è gender
		models.NewRowObject(6, "–ü—Ä–æ–µ–∫—Ç", "site.com", -1, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –≥–µ–Ω–¥–µ—Ä", "01.01.2024"),
		models.NewRowObject(7, "–ü—Ä–æ–µ–∫—Ç", "site.com", 3, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–µ–Ω–¥–µ—Ä", "01.01.2024"),
		models.NewRowObject(8, "–ü—Ä–æ–µ–∫—Ç", "site.com", 999, "–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –≥–µ–Ω–¥–µ—Ä", "01.01.2024"),

		// –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞—Ç—ã
		models.NewRowObject(9, "–ü—Ä–æ–µ–∫—Ç", "site.com", 2, "–û–ø–∏—Å–∞–Ω–∏–µ", ""), // –ø—É—Å—Ç–∞—è –¥–∞—Ç–∞

		// –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
		models.NewRowObject(15, "   ", "site.com", 2, "   ", "01.01.2024"),

		// –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
		models.NewRowObject(-1, "–ü—Ä–æ–µ–∫—Ç", "site.com", 2, "–û–ø–∏—Å–∞–Ω–∏–µ", "01.01.2024"),
	}

	type Config struct {
		Addr     string
		Password string
		DB       int
	}
	var dbConfig Config = Config{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	}
	var err error
	expErr := fmt.Sprint(models.ErrorIncorrectData)
	db := NewDB(dbConfig.Addr, dbConfig.Password, dbConfig.DB)
	rdb := db.Connect(db)
	for idx, value := range testNormalData {
		err := db.AddRow(context.TODO(), rdb, strconv.Itoa(idx), value)
		require.NoError(t, err, models.ErrorIncorrectData)
	}
	for idx, value := range testDataWithError {
		err = db.AddRow(context.TODO(), rdb, strconv.Itoa(idx), value)
		slog.Info("ERROR:", "ERROR:", err)
		require.EqualError(t, err, expErr, "Expected a specific error message")
	}

}

func TestGetRow(t *testing.T) {
	type Config struct {
		Addr     string
		Password string
		DB       int
	}
	var dbConfig Config = Config{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	}
	var err error
	rowNumbersPositive := []string{"1", "2", "3"}
	rowNumbersNegative := []string{"0", "-1", "", "true"}
	db := NewDB(dbConfig.Addr, dbConfig.Password, dbConfig.DB)
	rdb := db.Connect(db)
	for _, v := range rowNumbersPositive {
		err = db.GetRow(context.TODO(), rdb, v)

		require.NoError(t, err)
	}
	for _, v := range rowNumbersNegative {
		err = db.GetRow(context.TODO(), rdb, v)
		require.Error(t, err)
	}

}

func TestDelRow(t *testing.T) {
	type Config struct {
		Addr     string
		Password string
		DB       int
	}
	var dbConfig Config = Config{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	}
	var err error
	rowNumbersPositive := []string{"1", "2", "3"}
	rowNumbersNegative := []string{"0", "-1", "", "true"}
	db := NewDB(dbConfig.Addr, dbConfig.Password, dbConfig.DB)
	rdb := db.Connect(db)
	for _, v := range rowNumbersPositive {
		_, err = db.DelRow(context.TODO(), rdb, v)
		require.NoError(t, err)
	}
	for _, v := range rowNumbersNegative {
		_, err = db.DelRow(context.TODO(), rdb, v)
		require.Error(t, err)
	}

}

func TestGetAllKeys(t *testing.T) {
	type Config struct {
		Addr     string
		Password string
		DB       int
	}
	var dbConfig Config = Config{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	}
	db := NewDB(dbConfig.Addr, dbConfig.Password, dbConfig.DB)
	rdb := db.Connect(db)
	_, err := db.CheckUnfullfilledRows(ctx, rdb)
	require.NoError(t, err)
}
